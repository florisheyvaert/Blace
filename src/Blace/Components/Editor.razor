@typeparam T where T : EditorFile

<div class="editor_container @CssClass" style="position:relative;" hidden="@IsClosed">

    @if (ShowSettings)
    {
        <div class="settings @SettingsCssClass" style="@SettingCssStyle">
            <p class="settings-icon" @onclick="async() => await ToggleSettingsPanel()">&#9776;</p>

            @if (ShowSettingsPanel)
            {
                <div class="settings-panel @SettingsCssClass" style="@SettingCssStyle">
                    <div style="margin-bottom: .5rem;">
                        <label>
                            Theme
                        </label>
                        <InputSelect Value="Theme" ValueChanged="ThemeChanged" TValue="Theme" ValueExpression="(() => Theme)" style="width: 100%; padding: .25rem;">
                            @foreach (var theme in Enum.GetValues<Theme>())
                            {
                                <option value="@theme">@theme.ToString()</option>
                            }
                        </InputSelect>
                    </div>

                    <div style="margin-bottom: .5rem;">
                        <label>
                            Syntax
                        </label>
                        <InputSelect Value="Syntax" ValueChanged="SyntaxChanged" TValue="Syntax" ValueExpression="(() => Syntax)" style="width: 100%; padding: .25rem;">
                            @foreach (var syntax in Enum.GetValues<Syntax>())
                            {
                                <option value="@syntax">@syntax.ToString()</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="settings-overlay" @onclick="async() => await ToggleSettingsPanel(false)"></div>
            }

        </div>
    }

    <div id="@Id">
    </div>

</div>